{
	"name": "SQLDB Extraction",
	"properties": {
		"activities": [
			{
				"name": "Get DB Source Metadata",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT\t ds.KeyVaultName\n\t\t,td.[Schema] as SourceSchema\n                ,td.TableName as TableName\n\t\t,td.tableDefinitionID AS tableDefinitionID\n                ,td.WatermarkAttribute AS WatermarkAttribute\n\t\t,snk.Container\t\t\tAS Container\n                ,snk.BaseUrlSecret\t\tAS SinkBaseUrlSecret\n\t\t,fdsnk.SinkDirectory\t        AS Directory\n\t\t,fdsnk.SinkFileName\t\tAS [FileName]\n                ,m.MappingID\n\nFROM config.Mapping AS m\nINNER JOIN config.Connections AS src\n\t\tON m.SourceConnectionId = src.ConnectionId\n\t\tAND m.FlowId = @{pipeline().parameters.FlowId}\n\t\tAND src.ConnectionType = 'Database'\n\t\tAND m.IsActive = 1\nINNER JOIN config.TableDefinition AS td\n\t\tON m.SourceTableDefinitionId = td.TableDefinitionId\nINNER JOIN config.Connections AS snk\n\t\tON m.SinkConnectionId = snk.ConnectionId\n\t\tAND m.FlowId = @{pipeline().parameters.FlowId}\n\t\tAND m.IsActive = 1\nINNER JOIN [config].[FileDefinition] AS fdsnk\t\t-- File is sink\n\t\tON m.SinkFileDefinitionId = fdsnk.FileDefinitionId\nLEFT JOIN [config].[DAPServices] AS ds\n\t\tON 1=1",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metadata",
						"type": "DatasetReference",
						"parameters": {
							"SecretName": {
								"value": "@variables('init')",
								"type": "Expression"
							},
							"KeyvaultName": {
								"value": "@pipeline().globalParameters.keyvault_name",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "For Each DB Source",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get DB Source Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get DB Source Metadata').output.value\n",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Log Parameters",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "If New records",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[log].[Parameters]",
								"storedProcedureParameters": {
									"output_JSON": {
										"value": {
											"value": "@concat('{','\"KeyVaultName\":\"',item().KeyVaultName,'\",','\"SourceSchema\":\"',item().SourceSchema,'\",','\"TableName\":\"',item().TableName,'\",','\"tableDefinitionID\":\"',item().tableDefinitionID,'\",','\"Container\":\"',item().Container,'\",','\"Directory\":\"',item().Directory,'\",','\"FileName\":\"',item().FileName,'\",','\"WatermarkAttribute\":\"',item().WatermarkAttribute,'\",','\"SinkBaseUrlSecret\":\"',item().SinkBaseUrlSecret,'\"}')",
											"type": "Expression"
										},
										"type": "String"
									},
									"RunId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SqlDatabase",
								"type": "LinkedServiceReference",
								"parameters": {
									"Secret": {
										"value": "@variables('init')",
										"type": "Expression"
									},
									"KeyvaultName": {
										"value": "@pipeline().globalParameters.keyvault_name",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Lookup Table Columns",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "If New Metadata Changes",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select  STRING_AGG(\n \n    '\"'+cast(ColumnName as varchar(max))+'\"'\n,',') as ColumnMappings\n from [config].[ColumnDefinition] as CD\nwhere CD.TableDefinitionId = @{item().TableDefinitionId}",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metadata",
									"type": "DatasetReference",
									"parameters": {
										"SecretName": {
											"value": "@variables('init')",
											"type": "Expression"
										},
										"KeyvaultName": {
											"value": "@pipeline().globalParameters.keyvault_name",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "Lookup Old Watermark Value",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT CASE\n WHEN EXISTS (\n   SELECT 1 from [process].[Watermarks]\n   WHERE [MappingID] = @{item().MappingID}\n  )\n  THEN (\n    SELECT [CurrentWatermarkValue] from [process].[Watermarks]\n    WHERE [MappingID] = @{item().MappingID}\n  )\n  ELSE NULL\nEND as [CurrentWatermarkValue]",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metadata",
									"type": "DatasetReference",
									"parameters": {
										"SecretName": {
											"value": "@variables('init')",
											"type": "Expression"
										},
										"KeyvaultName": {
											"value": "@pipeline().globalParameters.keyvault_name",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "Lookup New Watermark Value",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select max (@{item().WatermarkAttribute}) as NewWatermarkValue\nfrom @{concat(item().SourceSchema,'.',item().TableName)}\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "SQLSource",
									"type": "DatasetReference",
									"parameters": {
										"SecretName": {
											"value": "@pipeline().parameters.SourceInit",
											"type": "Expression"
										},
										"KeyvaultName": {
											"value": "@pipeline().globalParameters.keyvault_name",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "Update Watermark",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "If New records",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[config].[WriteWatermark]",
								"storedProcedureParameters": {
									"CurrentWatermarkValue": {
										"value": {
											"value": "@{activity('Lookup Old Watermark Value').output.firstRow.CurrentWatermarkValue}\n",
											"type": "Expression"
										},
										"type": "String"
									},
									"NewWatermarkValue": {
										"value": {
											"value": "@{activity('Lookup New Watermark Value').output.firstRow.NewWatermarkvalue}",
											"type": "Expression"
										},
										"type": "String"
									},
									"MappingID": {
										"value": {
											"value": "@{item().MappingID}",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"WatermarkProcessedDate": {
										"value": {
											"value": "@{utcnow()}\n",
											"type": "Expression"
										},
										"type": "DateTime"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SqlDatabase",
								"type": "LinkedServiceReference",
								"parameters": {
									"Secret": {
										"value": "@variables('init')",
										"type": "Expression"
									},
									"KeyvaultName": {
										"value": "@pipeline().globalParameters.keyvault_name",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "SinkBaseUrl",
							"type": "WebActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "@concat('https://',item().KeyVaultName,'.vault.azure.net/secrets/',item().SinkBaseUrlSecret,'/?api-version=7.0')",
									"type": "Expression"
								},
								"connectVia": {
									"referenceName": "IR-NNDAP",
									"type": "IntegrationRuntimeReference"
								},
								"method": "GET",
								"authentication": {
									"type": "MSI",
									"resource": "https://vault.azure.net"
								}
							}
						},
						{
							"name": "Lookup ADF Mapping for Table",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "If New Metadata Changes",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select AdfColumnMapping from config.mapping where SourceTableDefinitionId = @{item().TableDefinitionID} ",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metadata",
									"type": "DatasetReference",
									"parameters": {
										"SecretName": {
											"value": "@variables('init')",
											"type": "Expression"
										},
										"KeyvaultName": {
											"value": "@pipeline().globalParameters.keyvault_name",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "Lookup Old Change Timestamp",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select LastChangeTimestamp from [process].[MetadataChanges] \nwhere TableDefinitionID = @{item().TableDefinitionID}",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "Metadata",
									"type": "DatasetReference",
									"parameters": {
										"SecretName": {
											"value": "@variables('init')",
											"type": "Expression"
										},
										"KeyvaultName": {
											"value": "@pipeline().globalParameters.keyvault_name",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "Lookup New Change Timestamp",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select modify_date\nFROM sys.tables as st\nwhere SCHEMA_NAME(st.schema_id) = '@{item().SourceSchema}'\nand st.name = '@{item().TableName}'\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "SQLSource",
									"type": "DatasetReference",
									"parameters": {
										"SecretName": {
											"value": "@pipeline().parameters.SourceInit",
											"type": "Expression"
										},
										"KeyvaultName": {
											"value": "@pipeline().globalParameters.keyvault_name",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "If New Metadata Changes",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Lookup Old Change Timestamp",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Lookup New Change Timestamp",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@greater(ticks(activity('Lookup New Change Timestamp').output.firstRow.modify_date), ticks(activity('Lookup Old Change Timestamp').output.firstRow.LastChangeTimestamp))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Set ADF Column Mapping",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "Capture Metadata Changes",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[config].[SetAdfMapping]",
											"storedProcedureParameters": {
												"DefinitionID": {
													"value": {
														"value": "@{item().TableDefinitionID}",
														"type": "Expression"
													},
													"type": "Int32"
												},
												"Type": {
													"value": "table",
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "LS_SqlDatabase",
											"type": "LinkedServiceReference",
											"parameters": {
												"Secret": {
													"value": "@variables('init')",
													"type": "Expression"
												},
												"KeyvaultName": {
													"value": "@pipeline().globalParameters.keyvault_name",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "Capture Metadata Changes",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderQuery": {
													"value": "SELECT    ISC.[COLUMN_NAME] AS [ColumnName]\t  \n,ISC.TABLE_NAME AS [TableName]\t  \n,NULL as [FileDefinitionId] -- this query is only called by DB extraction pipeline\t  \n,NULL as [APIDefinitionId] -- same      \n,ISC.[ORDINAL_POSITION]  AS [OrdinalPosition]      \n, case when ISC.[IS_NULLABLE] = 'NO' then 0 else 1 end as [ISNULLABLE]      \n,ISC.[DATA_TYPE] AS [DataType]      \n,ISC.[CHARACTER_MAXIMUM_LENGTH] AS [CharacterMaximumLength]      \n,ISC.[NUMERIC_PRECISION] AS [NumericPrecision]      \n,ISC.[NUMERIC_SCALE] As [NumericScale]      \n,ISC.[DATETIME_PRECISION] AS [DatetimePrecision]      \n,1 AS [Version] --Default version is 1, more logic to be added later on      \n,0 As [IsAnonymous] -- Default is not anonymous\n,CASE WHEN EXISTS \n(select * from [INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] AS ISTC \n--INNER JOIN  [INFORMATION_SCHEMA].[COLUMNS] AS ISC\n--ON ISC.TABLE_SCHEMA = ISTC.TABLE_SCHEMA\n--AND ISC.TABLE_NAME = ISTC.TABLE_NAME\nINNER JOIN [INFORMATION_SCHEMA].[CONSTRAINT_COLUMN_USAGE] AS ISCCU        \nON ISTC.TABLE_SCHEMA = ISCCU.TABLE_SCHEMA        \nAND ISTC.TABLE_NAME = ISCCU.TABLE_NAME\nAND ISTC.CONSTRAINT_NAME = ISCCU.CONSTRAINT_NAME\nWHERE ISCCU.COLUMN_Name = ISC.[COLUMN_NAME]\nand ISTC.CONSTRAINT_TYPE = 'PRIMARY KEY'\nand ISCCU.TABLE_SCHEMA = @{concat('''',item().SourceSchema,'''')}\nand ISCCU.TABLE_NAME = @{concat('''',item().TableName,'''')}\n)THEN 1\nELSE 0\nEND AS [IsPrimairyKey]\nfrom [INFORMATION_SCHEMA].[COLUMNS] AS ISC\nwhere TABLE_SCHEMA = @{concat('''',item().SourceSchema,'''')}\nand TABLE_NAME = @{concat('''',item().TableName,'''')}",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "AzureSqlSink",
												"sqlWriterStoredProcedureName": "[log].[WriteColumnDefinition]",
												"sqlWriterTableType": "log.DataTypeforColumnDefinitionTable",
												"storedProcedureTableTypeParameterName": "NewColumnDefinition"
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"mappings": [
													{
														"source": {
															"name": "ColumnName",
															"type": "String",
															"physicalType": "nvarchar"
														},
														"sink": {
															"name": "ColumnName",
															"type": "String",
															"physicalType": "nvarchar"
														}
													},
													{
														"source": {
															"name": "TableName",
															"type": "String",
															"physicalType": "nvarchar"
														},
														"sink": {
															"name": "TableName",
															"type": "String",
															"physicalType": "nvarchar"
														}
													},
													{
														"source": {
															"name": "FileDefinitionId",
															"type": "Int32",
															"physicalType": "int"
														},
														"sink": {
															"name": "FileDefinitionId",
															"type": "Int32",
															"physicalType": "int"
														}
													},
													{
														"source": {
															"name": "APIDefinitionId",
															"type": "Int32",
															"physicalType": "int"
														},
														"sink": {
															"name": "ApiDefinitionId",
															"type": "Int32",
															"physicalType": "int"
														}
													},
													{
														"source": {
															"name": "OrdinalPosition",
															"type": "Int32",
															"physicalType": "int"
														},
														"sink": {
															"name": "OrdinalPosition",
															"type": "Int32",
															"physicalType": "int"
														}
													},
													{
														"source": {
															"name": "ISNULLABLE",
															"type": "Int32",
															"physicalType": "int"
														},
														"sink": {
															"name": "IsNullable",
															"type": "String",
															"physicalType": "nvarchar"
														}
													},
													{
														"source": {
															"name": "DataType",
															"type": "String",
															"physicalType": "nvarchar"
														},
														"sink": {
															"name": "DataType",
															"type": "String",
															"physicalType": "varchar"
														}
													},
													{
														"source": {
															"name": "CharacterMaximumLength",
															"type": "Int32",
															"physicalType": "int"
														},
														"sink": {
															"name": "CharacterMaximumLength",
															"type": "Int32",
															"physicalType": "int"
														}
													},
													{
														"source": {
															"name": "NumericPrecision",
															"type": "Byte",
															"physicalType": "tinyint"
														},
														"sink": {
															"name": "NumericPrecision",
															"type": "Int32",
															"physicalType": "int"
														}
													},
													{
														"source": {
															"name": "NumericScale",
															"type": "Int32",
															"physicalType": "int"
														},
														"sink": {
															"name": "NumericScale",
															"type": "Int32",
															"physicalType": "int"
														}
													},
													{
														"source": {
															"name": "DatetimePrecision",
															"type": "Int16",
															"physicalType": "smallint"
														},
														"sink": {
															"name": "DatetimePrecision",
															"type": "Int16",
															"physicalType": "smallint"
														}
													},
													{
														"source": {
															"name": "IsPrimairyKey",
															"type": "Int32",
															"physicalType": "int"
														},
														"sink": {
															"name": "IsPrimairyKey",
															"type": "Int32",
															"physicalType": "int"
														}
													},
													{
														"source": {
															"name": "Version",
															"type": "Int32",
															"physicalType": "int"
														},
														"sink": {
															"name": "Version",
															"type": "Int32",
															"physicalType": "int"
														}
													},
													{
														"source": {
															"name": "IsAnonymous",
															"type": "Int32",
															"physicalType": "int"
														},
														"sink": {
															"name": "IsAnonymous",
															"type": "Int32",
															"physicalType": "int"
														}
													}
												],
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "SQLSource",
												"type": "DatasetReference",
												"parameters": {
													"SecretName": {
														"value": "@pipeline().parameters.SourceInit",
														"type": "Expression"
													},
													"KeyvaultName": {
														"value": "@pipeline().globalParameters.keyvault_name",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "Metadata",
												"type": "DatasetReference",
												"parameters": {
													"SecretName": {
														"value": "@variables('init')",
														"type": "Expression"
													},
													"KeyvaultName": {
														"value": "@pipeline().globalParameters.keyvault_name",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Update Derived Columns",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "Capture Metadata Changes",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "config.UpdateDerivedColumnsMetadata",
											"storedProcedureParameters": {
												"TableDefinitionID": {
													"value": {
														"value": "@{item().TableDefinitionID}",
														"type": "Expression"
													},
													"type": "Int32"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "LS_SqlDatabase",
											"type": "LinkedServiceReference",
											"parameters": {
												"Secret": {
													"value": "@variables('init')",
													"type": "Expression"
												},
												"KeyvaultName": {
													"value": "@pipeline().globalParameters.keyvault_name",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "Update metadata change time",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "Set ADF Column Mapping",
												"dependencyConditions": [
													"Succeeded"
												]
											},
											{
												"activity": "Update Derived Columns",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[config].[WriteLastMetadataChangeTime]",
											"storedProcedureParameters": {
												"LastChangeTimestamp": {
													"value": {
														"value": "@activity('Lookup New Change Timestamp').output.firstRow.modify_date",
														"type": "Expression"
													},
													"type": "DateTime"
												},
												"TableDefinitionID": {
													"value": {
														"value": "@{item().TableDefinitionID}",
														"type": "Expression"
													},
													"type": "Int32"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "LS_SqlDatabase",
											"type": "LinkedServiceReference",
											"parameters": {
												"Secret": {
													"value": "@variables('init')",
													"type": "Expression"
												},
												"KeyvaultName": {
													"value": "@pipeline().globalParameters.keyvault_name",
													"type": "Expression"
												}
											}
										}
									}
								]
							}
						},
						{
							"name": "Lookup new values",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Lookup Old Watermark Value",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Lookup New Watermark Value",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Lookup Table Columns",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "SinkBaseUrl",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Lookup ADF Mapping for Table",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select case when exists (select top(1) * from @{concat(item().SourceSchema,'.',item().TableName)}\nwhere @{item().WatermarkAttribute} > '@{activity('Lookup Old Watermark Value').output.firstRow.CurrentWatermarkValue}'\n and @{item().WatermarkAttribute} <= '@{activity('Lookup New Watermark Value').output.firstRow.NewWatermarkvalue}' )\nthen 1\nelse Null\nend as NewValues",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "SQLSource",
									"type": "DatasetReference",
									"parameters": {
										"SecretName": {
											"value": "@pipeline().parameters.SourceInit",
											"type": "Expression"
										},
										"KeyvaultName": {
											"value": "@pipeline().globalParameters.keyvault_name",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "If New records",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Lookup new values",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@contains(activity('Lookup new values').output,'firstrow')",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Ingest SQLDB data",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderQuery": {
													"value": "select  @{activity('Lookup Table Columns').output.firstRow.ColumnMappings} from @{concat(item().SourceSchema,'.',item().TableName)}\nwhere @{item().WatermarkAttribute} > '@{activity('Lookup Old Watermark Value').output.firstRow.CurrentWatermarkValue}'\n and @{item().WatermarkAttribute} <= '@{activity('Lookup New Watermark Value').output.firstRow.NewWatermarkvalue}'",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"parallelCopies": 1,
											"dataIntegrationUnits": 2,
											"translator": {
												"value": "@json(activity('Lookup ADF Mapping for Table').output.firstrow.AdfColumnMapping)",
												"type": "Expression"
											}
										},
										"inputs": [
											{
												"referenceName": "SQLSource",
												"type": "DatasetReference",
												"parameters": {
													"SecretName": {
														"value": "@pipeline().parameters.SourceInit",
														"type": "Expression"
													},
													"KeyvaultName": {
														"value": "@pipeline().globalParameters.keyvault_name",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "DataLake",
												"type": "DatasetReference",
												"parameters": {
													"FileSystem": {
														"value": "@item().Container",
														"type": "Expression"
													},
													"Directory": {
														"value": "@concat(item().Directory, '/', formatDateTime(utcnow(), 'yyyy'), '/',formatDateTime(utcnow(), 'MM'))",
														"type": "Expression"
													},
													"FileName": {
														"value": "@concat(item().FileName,utcnow(),'.parquet')",
														"type": "Expression"
													},
													"BaseUrl": {
														"value": "@activity('SinkBaseUrl').output.value",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"name": "Log Pipeline Run",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "Ingest SQLDB data",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "AzureSqlSource",
												"sqlReaderQuery": {
													"value": "SELECT '@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as PipelineRunId,\n--'@{activity('Ingest SQLDB data').output.executionDetails[0].profile.transfer.details.readingFromSource.type}' as Source,\n'@{concat(item().SourceSchema,'.',item().TableName)}' as Source,\n'@{activity('Ingest SQLDB data').output.executionDetails[0].source.type}' as SourceType,\n--'@{activity('Ingest SQLDB data').output.executionDetails[0].profile.transfer.details.writingToSink.type}' as Sink,\n'@{concat(item().Directory,'.',item().FileName)}' as Sink,\n'@{activity('Ingest SQLDB data').output.executionDetails[0].sink.type}' as SinkType,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerId}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('Ingest SQLDB data').output.rowsRead}' as RowsRead,\n'@{activity('Ingest SQLDB data').output.rowsCopied}' as RowsCopied,\n'@{activity('Ingest SQLDB data').output.copyDuration}' as CopyDurationinsecs,\n'@{activity('Ingest SQLDB data').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('Ingest SQLDB data').output.usedParallelCopies}' as NoParallelCopies,\n'@{activity('Ingest SQLDB data').output.effectiveIntegrationRuntime}' as EffectiveIntegrationRuntime,\n'@{activity('Ingest SQLDB data').output.executionDetails[0].start}' as CopyActivityStartTime,\n'@{utcnow()}' as CopyActivityEndTime,\n'@{activity('Ingest SQLDB data').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivityqueuingDurationinsecs,\n'@{activity('Ingest SQLDB data').output.executionDetails[0].detailedDurations.timeToFirstByte}' as CopyActivitytimeToFirstByteinsecs,\n'@{activity('Ingest SQLDB data').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivitytransferDurationinsecs\n-- '@{activity('Ingest SQLDB data').output.billingreference}' as billingreference",
													"type": "Expression"
												},
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"sink": {
												"type": "AzureSqlSink"
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "Metadata",
												"type": "DatasetReference",
												"parameters": {
													"SecretName": {
														"value": "@variables('init')",
														"type": "Expression"
													},
													"KeyvaultName": {
														"value": "@pipeline().globalParameters.keyvault_name",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "SQLSink",
												"type": "DatasetReference",
												"parameters": {
													"SinkTableName": "PipelinesLogs",
													"SinkTableSchema": "log",
													"KeyvaultName": {
														"value": "@pipeline().globalParameters.keyvault_name",
														"type": "Expression"
													}
												}
											}
										]
									}
								]
							}
						}
					]
				}
			}
		],
		"parameters": {
			"FlowId": {
				"type": "string",
				"defaultValue": "6"
			},
			"PipelineName": {
				"type": "string"
			},
			"Init": {
				"type": "string",
				"defaultValue": "sql-nndap-metadata"
			},
			"SourceInit": {
				"type": "string",
				"defaultValue": "sql-nndap-samplesource"
			}
		},
		"variables": {
			"init": {
				"type": "String",
				"defaultValue": "sql-nndap-metadata"
			}
		},
		"folder": {
			"name": "Data Extraction Component"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}