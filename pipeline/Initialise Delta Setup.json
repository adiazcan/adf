{
	"name": "Initialise Delta Setup",
	"properties": {
		"activities": [
			{
				"name": "Get Delta Config",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set Init Variable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT m.[MappingId]\n      ,c.[Database]\n      ,td.[Schema]\n      ,td.[TableName]\n      ,td.[DeltaDataPath]\n      ,td.[DeltaStructure]\n      ,ISNULL(td.[PartitionAttribute],'') AS [PartitionAttribute]\n      ,ISNULL(I.[DeltaSetupMode],'append') AS [DeltaSetupMode]\n      ,ISNULL(I.[SchemaMode],'none') AS [SchemaMergeMode]\n      , dap.*\n  FROM [config].[Mapping] AS m\n  INNER JOIN [config].[TableDefinition] AS td\n  ON m.SinkTableDefinitionId = td.TableDefinitionId\n  AND m.DAPProcess = 'Data Ingestion'\n  AND m.IsActive = 1\n  INNER JOIN [config].Connections AS c\n  ON m.SinkConnectionId = c.connectionId\n  AND c.IsActive = 1\n  Left join [process].[InitialDeltaSetup] I\n  on I.TableDefinitionId=td.TableDefinitionId\n  CROSS JOIN\n  [config].[DAPServices] dap\n  ",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "Metadata",
						"type": "DatasetReference",
						"parameters": {
							"SecretName": {
								"value": "@variables('Init')",
								"type": "Expression"
							},
							"KeyvaultName": {
								"value": "@pipeline().globalParameters.keyvault_name",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEachTable",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Delta Config",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Delta Config').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "DeltaTable",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": {
									"value": "@pipeline().parameters.Notebookpath",
									"type": "Expression"
								},
								"baseParameters": {
									"DbrDatabasename": {
										"value": "@item().Database",
										"type": "Expression"
									},
									"DbrTablename": {
										"value": "@item().TableName",
										"type": "Expression"
									},
									"DeltaStructure": {
										"value": "@item().DeltaStructure",
										"type": "Expression"
									},
									"DeltaDataPath": {
										"value": "@item().DeltaDataPath",
										"type": "Expression"
									},
									"PartitionAttribute": {
										"value": "@item().PartitionAttribute",
										"type": "Expression"
									},
									"DbrSchemaname": {
										"value": "@item().Schema",
										"type": "Expression"
									},
									"DeltaSetupMode": {
										"value": "@item().DeltaSetupMode",
										"type": "Expression"
									},
									"SchemaMergeMode": {
										"value": "@item().SchemaMergeMode",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_DatabricksJobCluster",
								"type": "LinkedServiceReference",
								"parameters": {
									"DatabricksWorkspaceUrl": {
										"value": "@item().DatabricksWorkspaceUrl",
										"type": "Expression"
									},
									"ClusterNodeType": {
										"value": "@item().DatabricksClusterNodeType",
										"type": "Expression"
									},
									"ClusterVersion": {
										"value": "@item().DatabricksClusterVersion",
										"type": "Expression"
									},
									"PythonVersion": {
										"value": "@item().DatabricksPythonVersion",
										"type": "Expression"
									},
									"DatabricksWorkspaceId": {
										"value": "@item().DatabricksWorkspaceId",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Initialise",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat('https://',pipeline().globalParameters.keyvault_name,'.vault.azure.net/secrets/init/?api-version=7.0' )",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "Set Init Variable",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Initialise",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "Init",
					"value": {
						"value": "@activity('Initialise').output.value",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"Notebookpath": {
				"type": "string",
				"defaultValue": "/Shared/Data Ingestion/Initialise Delta Setup"
			},
			"DAPServiceConfig": {
				"type": "string",
				"defaultValue": {
					"SecretName": "dbw-nndap-token",
					"KeyVaultName": "",
					"DatabricksWorkspaceUrl": "",
					"ClusterNodeType": "Standard_DS3_v2",
					"ClusterVersion": "7.0.x-scala2.12",
					"PythonVersion": "/databricks/python3/bin/python3"
				}
			}
		},
		"variables": {
			"Init": {
				"type": "String",
				"defaultValue": "sql-nndap-metadata"
			}
		},
		"folder": {
			"name": "Data Ingestion Component"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}